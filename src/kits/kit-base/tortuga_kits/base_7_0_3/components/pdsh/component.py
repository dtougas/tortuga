# Copyright 2008-2018 Univa Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


from tortuga.db.nodesDbHandler import NodesDbHandler
from tortuga.db.softwareProfilesDbHandler import SoftwareProfilesDbHandler
from tortuga.kit.installer import ComponentInstallerBase


CONFIG_FILE = '/etc/hosts.pdsh'


class ComponentInstaller(ComponentInstallerBase):
    name = 'pdsh'
    version = '7.0.3'
    os_list = [
        {'family': 'rhel', 'version': '6', 'arch': 'x86_64'},
        {'family': 'rhel', 'version': '7', 'arch': 'x86_64'},
    ]

    def _configure(self, software_profile_name, fd, *args, **kwargs): \
            # pylint: disable=unused-argument
        #
        # Write config file
        #

        with open(CONFIG_FILE, 'w') as fp:
            print("# File generated by genconfig", file=fp)

            installer = self.kit_installer.config_manager.getInstaller()

            for node in NodesDbHandler().getNodeList(self.session):
                if node.name == installer:
                    continue

                if node.isIdle:
                    continue

                if node.state == 'Deleted':
                    continue

                print(node.name, file=fp)

        #
        # Write /etc/netgroup
        #
        with open('/etc/netgroup', 'w') as fp:
            software_profiles = \
                SoftwareProfilesDbHandler().getSoftwareProfileList(
                    self.session)
            for software_profile in software_profiles:
                if not software_profile.nodes:
                    continue

                software_profile_node_list = [
                    node.name
                    for node in software_profile.nodes
                    if node.state != 'Deleted'
                ]
                if not software_profile_node_list:
                    continue

                fp.write(
                    '{} {}\n\n'.format(
                        software_profile.name,
                        ' '.join(['({},,)'.format(node)
                                  for node in software_profile_node_list])
                    )
                )

    def action_add_host(self, hardware_profile_name, software_profile_name,
                        nodes, *args, **kwargs): \
            # pylint: disable=unused-argument
        self._configure(software_profile_name, None)

    def action_configure(self, software_profile_name, *args, **kwargs): \
            # pylint: disable=unused-argument
        self._configure(software_profile_name, None)

    def action_delete_host(self, hardware_profile_name, software_profile_name,
                           nodes, *args, **kwargs): \
            # pylint: disable=unused-argument
        self._configure(software_profile_name, None)

    def action_post_install(self, *args, **kwargs): \
            # pylint: disable=unused-argument
        self._configure(None, None)
